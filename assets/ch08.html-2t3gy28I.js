import{_ as t,c as a,a as o,o as i}from"./app-Cl7lX8oh.js";const s={};function n(r,e){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="chapter-8-pull-complexity-downwards" tabindex="-1"><a class="header-anchor" href="#chapter-8-pull-complexity-downwards"><span>Chapter 8 Pull Complexity Downwards</span></a></h1><p>This chapter introduces another way of thinking about how to create deeper classes. Suppose that you are developing a new module, and you discover a piece of unavoidable complexity. Which is better: should you let users of the module deal with the complexity, or should you handle the complexity internally within the module? If the complexity is related to the functionality provided by the module, then the second answer is usually the right one. Most modules have more users than developers, so it is better for the developers to suffer than the users. As a module developer, you should strive to make life as easy as possible for the users of your module, even if that means extra work for you. Another way of expressing this idea is that it is more important for a module to have a simple interface than a simple implementation.</p><p>As a developer, it’s tempting to behave in the opposite fashion: solve the easy problems and punt the hard ones to someone else. If a condition arises that you’re not certain how to deal with, the easiest thing is to throw an exception and let the caller handle it. If you are not certain what policy to implement, you can define a few configuration parameters to control the policy and leave it up to the system administrator to figure out the best values for them.</p><p>Approaches like these will make your life easier in the short term, but they amplify complexity, so that many people must deal with a problem, rather than just one person. For example, if a class throws an exception, every caller of the class will have to deal with it. If a class exports configuration parameters, every system administrator in every installation will have to learn how to set them.</p><h2 id="_8-1-example-editor-text-class" tabindex="-1"><a class="header-anchor" href="#_8-1-example-editor-text-class"><span>8.1 Example: editor text class</span></a></h2><h2 id="_8-2-example-configuration-parameters" tabindex="-1"><a class="header-anchor" href="#_8-2-example-configuration-parameters"><span>8.2 Example: configuration parameters</span></a></h2><h2 id="_8-3-taking-it-too-far" tabindex="-1"><a class="header-anchor" href="#_8-3-taking-it-too-far"><span>8.3 Taking it too far</span></a></h2><h2 id="_8-4-conclusion" tabindex="-1"><a class="header-anchor" href="#_8-4-conclusion"><span>8.4 Conclusion</span></a></h2><p>When developing a module, look for opportunities to take a little bit of extra suffering upon yourself in order to reduce the suffering of your users.</p>',9)]))}const h=t(s,[["render",n]]),p=JSON.parse('{"path":"/en/ch08.html","title":"Chapter 8 Pull Complexity Downwards","lang":"en-US","frontmatter":{},"git":{"updatedTime":1747185858000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"877d4cd470c60b73ff0db48f7c7f83fb0ee8fd61","time":1747185858000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"fix repo name"}]},"filePathRelative":"en/ch08.md"}');export{h as comp,p as data};
