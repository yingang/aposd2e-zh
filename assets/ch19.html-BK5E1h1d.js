import{_ as t,c as n,a,o as s}from"./app-W63b2ksF.js";const r={};function i(o,e){return s(),n("div",null,e[0]||(e[0]=[a('<h1 id="chapter-19-software-trends" tabindex="-1"><a class="header-anchor" href="#chapter-19-software-trends"><span>Chapter 19 Software Trends</span></a></h1><p>As a way of illustrating the principles discussed in this book, this chapter considers several trends and patterns that have become popular in software development over the last few decades. For each trend, I will describe how that trend relates to the principles in this book and use the principles to evaluate whether that trend provides leverage against software complexity.</p><h2 id="_19-1-object-oriented-programming-and-inheritance" tabindex="-1"><a class="header-anchor" href="#_19-1-object-oriented-programming-and-inheritance"><span>19.1 Object-oriented programming and inheritance</span></a></h2><h2 id="_19-2-agile-development" tabindex="-1"><a class="header-anchor" href="#_19-2-agile-development"><span>19.2 Agile development</span></a></h2><h2 id="_19-3-unit-tests" tabindex="-1"><a class="header-anchor" href="#_19-3-unit-tests"><span>19.3 Unit tests</span></a></h2><h2 id="_19-4-test-driven-development" tabindex="-1"><a class="header-anchor" href="#_19-4-test-driven-development"><span>19.4 Test-driven development</span></a></h2><h2 id="_19-5-design-patterns" tabindex="-1"><a class="header-anchor" href="#_19-5-design-patterns"><span>19.5 Design patterns</span></a></h2><h2 id="_19-6-getters-and-setters" tabindex="-1"><a class="header-anchor" href="#_19-6-getters-and-setters"><span>19.6 Getters and setters</span></a></h2><h2 id="_19-7-conclusion" tabindex="-1"><a class="header-anchor" href="#_19-7-conclusion"><span>19.7 Conclusion</span></a></h2><p>Whenever you encounter a proposal for a new software development paradigm, challenge it from the standpoint of complexity: does the proposal really help to minimize complexity in large software systems? Many proposals sound good on the surface, but if you look more deeply you will see that some of them make complexity worse, not better.</p>',10)]))}const d=t(r,[["render",i]]),h=JSON.parse('{"path":"/en/ch19.html","title":"Chapter 19 Software Trends","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"19.1 Object-oriented programming and inheritance","slug":"_19-1-object-oriented-programming-and-inheritance","link":"#_19-1-object-oriented-programming-and-inheritance","children":[]},{"level":2,"title":"19.2 Agile development","slug":"_19-2-agile-development","link":"#_19-2-agile-development","children":[]},{"level":2,"title":"19.3 Unit tests","slug":"_19-3-unit-tests","link":"#_19-3-unit-tests","children":[]},{"level":2,"title":"19.4 Test-driven development","slug":"_19-4-test-driven-development","link":"#_19-4-test-driven-development","children":[]},{"level":2,"title":"19.5 Design patterns","slug":"_19-5-design-patterns","link":"#_19-5-design-patterns","children":[]},{"level":2,"title":"19.6 Getters and setters","slug":"_19-6-getters-and-setters","link":"#_19-6-getters-and-setters","children":[]},{"level":2,"title":"19.7 Conclusion","slug":"_19-7-conclusion","link":"#_19-7-conclusion","children":[]}],"git":{"updatedTime":1744084640000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"808ca72c9a72c5376872dd363b87914283fac24c","time":1744084640000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch19.md"}');export{d as comp,h as data};
