import{_ as n,c as a,a as i,o as t}from"./app-W63b2ksF.js";const s={};function o(r,e){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="chapter-10-define-errors-out-of-existence" tabindex="-1"><a class="header-anchor" href="#chapter-10-define-errors-out-of-existence"><span>Chapter 10 Define Errors Out Of Existence</span></a></h1><p>Exception handling is one of the worst sources of complexity in software systems. Code that deals with special conditions is inherently harder to write than code that deals with normal cases, and developers often define exceptions without considering how they will be handled. This chapter discusses why exceptions contribute disproportionately to complexity, then it shows how to simplify exception handling. The key overall lesson from this chapter is to reduce the number of places where exceptions must be handled; in some cases the semantics of operations can be modified so that the normal behavior handles all situations and there is no exceptional condition to report (hence the title of this chapter).</p><h2 id="_10-1-why-exceptions-add-complexity" tabindex="-1"><a class="header-anchor" href="#_10-1-why-exceptions-add-complexity"><span>10.1 Why exceptions add complexity</span></a></h2><h2 id="_10-2-too-many-exceptions" tabindex="-1"><a class="header-anchor" href="#_10-2-too-many-exceptions"><span>10.2 Too many exceptions</span></a></h2><h2 id="_10-3-define-errors-out-of-existence" tabindex="-1"><a class="header-anchor" href="#_10-3-define-errors-out-of-existence"><span>10.3 Define errors out of existence</span></a></h2><h2 id="_10-4-example-file-deletion-in-windows" tabindex="-1"><a class="header-anchor" href="#_10-4-example-file-deletion-in-windows"><span>10.4 Example: file deletion in Windows</span></a></h2><h2 id="_10-5-example-java-substring-method" tabindex="-1"><a class="header-anchor" href="#_10-5-example-java-substring-method"><span>10.5 Example: Java substring method</span></a></h2><h2 id="_10-6-mask-exceptions" tabindex="-1"><a class="header-anchor" href="#_10-6-mask-exceptions"><span>10.6 Mask exceptions</span></a></h2><h2 id="_10-7-exception-aggregation" tabindex="-1"><a class="header-anchor" href="#_10-7-exception-aggregation"><span>10.7 Exception aggregation</span></a></h2><h2 id="_10-8-just-crash" tabindex="-1"><a class="header-anchor" href="#_10-8-just-crash"><span>10.8 Just crash?</span></a></h2><h2 id="_10-9-taking-it-too-far" tabindex="-1"><a class="header-anchor" href="#_10-9-taking-it-too-far"><span>10.9 Taking it too far</span></a></h2><h2 id="_10-10-conclusion" tabindex="-1"><a class="header-anchor" href="#_10-10-conclusion"><span>10.10 Conclusion</span></a></h2><p>Special cases of any form make code harder to understand and increase the likelihood of bugs. This chapter focused on exceptions, which are one of the most significant sources of special-case code, and discussed how to reduce the number of places where exceptions must be handled. The best way to do this is by redefining semantics to eliminate error conditions. For exceptions that can’t be defined away, you should look for opportunities to mask them at a low level, so their impact is limited, or aggregate several special-case handlers into a single more generic handler. Together, these techniques can have a significant impact on overall system complexity.</p><p>1Ding Yuan et. al., “Simple Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-Intensive Systems,” 2014 USENIX Conference on Operating System Design and Implementation.</p>',14)]))}const l=n(s,[["render",o]]),h=JSON.parse('{"path":"/en/ch10.html","title":"Chapter 10 Define Errors Out Of Existence","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"10.1 Why exceptions add complexity","slug":"_10-1-why-exceptions-add-complexity","link":"#_10-1-why-exceptions-add-complexity","children":[]},{"level":2,"title":"10.2 Too many exceptions","slug":"_10-2-too-many-exceptions","link":"#_10-2-too-many-exceptions","children":[]},{"level":2,"title":"10.3 Define errors out of existence","slug":"_10-3-define-errors-out-of-existence","link":"#_10-3-define-errors-out-of-existence","children":[]},{"level":2,"title":"10.4 Example: file deletion in Windows","slug":"_10-4-example-file-deletion-in-windows","link":"#_10-4-example-file-deletion-in-windows","children":[]},{"level":2,"title":"10.5 Example: Java substring method","slug":"_10-5-example-java-substring-method","link":"#_10-5-example-java-substring-method","children":[]},{"level":2,"title":"10.6 Mask exceptions","slug":"_10-6-mask-exceptions","link":"#_10-6-mask-exceptions","children":[]},{"level":2,"title":"10.7 Exception aggregation","slug":"_10-7-exception-aggregation","link":"#_10-7-exception-aggregation","children":[]},{"level":2,"title":"10.8 Just crash?","slug":"_10-8-just-crash","link":"#_10-8-just-crash","children":[]},{"level":2,"title":"10.9 Taking it too far","slug":"_10-9-taking-it-too-far","link":"#_10-9-taking-it-too-far","children":[]},{"level":2,"title":"10.10 Conclusion","slug":"_10-10-conclusion","link":"#_10-10-conclusion","children":[]}],"git":{"updatedTime":1744084640000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"808ca72c9a72c5376872dd363b87914283fac24c","time":1744084640000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch10.md"}');export{l as comp,h as data};
