import{_ as a,c as n,a as s,o as i}from"./app-W63b2ksF.js";const t={};function l(o,e){return i(),n("div",null,e[0]||(e[0]=[s('<h1 id="chapter-4-modules-should-be-deep" tabindex="-1"><a class="header-anchor" href="#chapter-4-modules-should-be-deep"><span>Chapter 4 Modules Should Be Deep</span></a></h1><p>One of the most important techniques for managing software complexity is to design systems so that developers only need to face a small fraction of the overall complexity at any given time. This approach is called <em>modular design</em>, and this chapter presents its basic principles.</p><h2 id="_4-1-modular-design" tabindex="-1"><a class="header-anchor" href="#_4-1-modular-design"><span>4.1 Modular design</span></a></h2><h2 id="_4-2-what-s-in-an-interface" tabindex="-1"><a class="header-anchor" href="#_4-2-what-s-in-an-interface"><span>4.2 What’s in an interface?</span></a></h2><h2 id="_4-3-abstractions" tabindex="-1"><a class="header-anchor" href="#_4-3-abstractions"><span>4.3 Abstractions</span></a></h2><h2 id="_4-4-deep-modules" tabindex="-1"><a class="header-anchor" href="#_4-4-deep-modules"><span>4.4 Deep modules</span></a></h2><h2 id="_4-5-shallow-modules" tabindex="-1"><a class="header-anchor" href="#_4-5-shallow-modules"><span>4.5 Shallow modules</span></a></h2><h2 id="_4-6-classitis" tabindex="-1"><a class="header-anchor" href="#_4-6-classitis"><span>4.6 Classitis</span></a></h2><h2 id="_4-7-examples-java-and-unix-i-o" tabindex="-1"><a class="header-anchor" href="#_4-7-examples-java-and-unix-i-o"><span>4.7 Examples: Java and Unix I/O</span></a></h2><h2 id="_4-8-conclusion" tabindex="-1"><a class="header-anchor" href="#_4-8-conclusion"><span>4.8 Conclusion</span></a></h2><p>By separating the interface of a module from its implementation, we can hide the complexity of the implementation from the rest of the system. Users of a module need only understand the abstraction provided by its interface. The most important issue in designing classes and other modules is to make them deep, so that they have simple interfaces for the common use cases, yet still provide significant functionality. This maximizes the amount of complexity that is concealed.</p><p>1There exist languages, mostly in the research community, where the overall behavior of a method or function can be described formally using a specification language. The specification can be checked automatically to ensure that it matches the implementation. An interesting question is whether such a formal specification could replace the informal parts of an interface. My current opinion is that an interface described in English is likely to be more intuitive and understandable for developers than one written in a formal specification language.</p>',12)]))}const c=a(t,[["render",l]]),h=JSON.parse('{"path":"/en/ch04.html","title":"Chapter 4 Modules Should Be Deep","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"4.1 Modular design","slug":"_4-1-modular-design","link":"#_4-1-modular-design","children":[]},{"level":2,"title":"4.2 What’s in an interface?","slug":"_4-2-what-s-in-an-interface","link":"#_4-2-what-s-in-an-interface","children":[]},{"level":2,"title":"4.3 Abstractions","slug":"_4-3-abstractions","link":"#_4-3-abstractions","children":[]},{"level":2,"title":"4.4 Deep modules","slug":"_4-4-deep-modules","link":"#_4-4-deep-modules","children":[]},{"level":2,"title":"4.5 Shallow modules","slug":"_4-5-shallow-modules","link":"#_4-5-shallow-modules","children":[]},{"level":2,"title":"4.6 Classitis","slug":"_4-6-classitis","link":"#_4-6-classitis","children":[]},{"level":2,"title":"4.7 Examples: Java and Unix I/O","slug":"_4-7-examples-java-and-unix-i-o","link":"#_4-7-examples-java-and-unix-i-o","children":[]},{"level":2,"title":"4.8 Conclusion","slug":"_4-8-conclusion","link":"#_4-8-conclusion","children":[]}],"git":{"updatedTime":1744084640000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"808ca72c9a72c5376872dd363b87914283fac24c","time":1744084640000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch04.md"}');export{c as comp,h as data};
