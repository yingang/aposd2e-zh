import{_ as t,c as a,a as n,o as i}from"./app-W63b2ksF.js";const o={};function s(r,e){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="chapter-3-working-code-isn-t-enough-strategic-vs-tactical-programming" tabindex="-1"><a class="header-anchor" href="#chapter-3-working-code-isn-t-enough-strategic-vs-tactical-programming"><span>Chapter 3 Working Code Isn’t Enough(Strategic vs. Tactical Programming)</span></a></h1><p>One of the most important elements of good software design is the mindset you adopt when you approach a programming task. Many organizations encourage a tactical mindset, focused on getting features working as quickly as possible. However, if you want a good design, you must take a more strategic approach where you invest time to produce clean designs and fix problems. This chapter discusses why the strategic approach produces better designs and is actually cheaper than the tactical approach over the long run.</p><h2 id="_3-1-tactical-programming" tabindex="-1"><a class="header-anchor" href="#_3-1-tactical-programming"><span>3.1 Tactical programming</span></a></h2><h2 id="_3-2-strategic-programming" tabindex="-1"><a class="header-anchor" href="#_3-2-strategic-programming"><span>3.2 Strategic programming</span></a></h2><h2 id="_3-3-how-much-to-invest" tabindex="-1"><a class="header-anchor" href="#_3-3-how-much-to-invest"><span>3.3 How much to invest?</span></a></h2><h2 id="_3-4-startups-and-investment" tabindex="-1"><a class="header-anchor" href="#_3-4-startups-and-investment"><span>3.4 Startups and investment</span></a></h2><h2 id="_3-5-conclusion" tabindex="-1"><a class="header-anchor" href="#_3-5-conclusion"><span>3.5 Conclusion</span></a></h2><p>Good design doesn’t come for free. It has to be something you invest in continually, so that small problems don’t accumulate into big ones. Fortunately, good design eventually pays for itself, and sooner than you might think.</p><p>It’s crucial to be consistent in applying the strategic approach and to think of investment as something to do today, not tomorrow. When you get in a crunch it will be tempting to put off cleanups until after the crunch is over. However, this is a slippery slope; after the current crunch there will almost certainly be another one, and another after that. Once you start delaying design improvements, it’s easy for the delays to become permanent and for your culture to slip into the tactical approach. The longer you wait to address design problems, the bigger they become; the solutions become more intimidating, which makes it easy to put them off even more. The most effective approach is one where every engineer makes continuous small investments in good design.</p>',9)]))}const h=t(o,[["render",s]]),g=JSON.parse('{"path":"/en/ch03.html","title":"Chapter 3 Working Code Isn’t Enough(Strategic vs. Tactical Programming)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"3.1 Tactical programming","slug":"_3-1-tactical-programming","link":"#_3-1-tactical-programming","children":[]},{"level":2,"title":"3.2 Strategic programming","slug":"_3-2-strategic-programming","link":"#_3-2-strategic-programming","children":[]},{"level":2,"title":"3.3 How much to invest?","slug":"_3-3-how-much-to-invest","link":"#_3-3-how-much-to-invest","children":[]},{"level":2,"title":"3.4 Startups and investment","slug":"_3-4-startups-and-investment","link":"#_3-4-startups-and-investment","children":[]},{"level":2,"title":"3.5 Conclusion","slug":"_3-5-conclusion","link":"#_3-5-conclusion","children":[]}],"git":{"updatedTime":1744084640000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"808ca72c9a72c5376872dd363b87914283fac24c","time":1744084640000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch03.md"}');export{h as comp,g as data};
