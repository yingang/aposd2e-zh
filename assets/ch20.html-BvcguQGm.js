import{_ as a,c as n,a as t,o as i}from"./app-W63b2ksF.js";const o={};function r(s,e){return i(),n("div",null,e[0]||(e[0]=[t('<h1 id="chapter-20-designing-for-performance" tabindex="-1"><a class="header-anchor" href="#chapter-20-designing-for-performance"><span>Chapter 20 Designing for Performance</span></a></h1><p>Up until this point, the discussion of software design has focused on complexity; the goal has been to make software as simple and understandable as possible. But what if you are working on a system that needs to be fast? How should performance considerations affect the design process? This chapter discusses how to achieve high performance without sacrificing clean design. The most important idea is still simplicity: not only does simplicity improve a system’s design, but it usually makes systems faster.</p><h2 id="_20-1-how-to-think-about-performance" tabindex="-1"><a class="header-anchor" href="#_20-1-how-to-think-about-performance"><span>20.1 How to think about performance</span></a></h2><h2 id="_20-2-measure-before-and-after-modifying" tabindex="-1"><a class="header-anchor" href="#_20-2-measure-before-and-after-modifying"><span>20.2 Measure before (and after) modifying</span></a></h2><h2 id="_20-3-design-around-the-critical-path" tabindex="-1"><a class="header-anchor" href="#_20-3-design-around-the-critical-path"><span>20.3 Design around the critical path</span></a></h2><h2 id="_20-4-an-example-ramcloud-buffers" tabindex="-1"><a class="header-anchor" href="#_20-4-an-example-ramcloud-buffers"><span>20.4 An example: RAMCloud Buffers</span></a></h2><h2 id="_20-5-conclusion" tabindex="-1"><a class="header-anchor" href="#_20-5-conclusion"><span>20.5 Conclusion</span></a></h2><p>The most important overall lesson from this chapter is that clean design and high performance are compatible. The Buffer class rewrite improved its performance by a factor of 2 while simplifying its design and reducing code size by 20%. Complicated code tends to be slow because it does extraneous or redundant work. On the other hand, if you write clean, simple code, your system will probably be fast enough that you don’t have to worry much about performance in the first place. In the few cases where you do need to optimize performance, the key is simplicity again: find the critical paths that are most important for performance and make them as simple as possible.</p>',8)]))}const h=a(o,[["render",r]]),l=JSON.parse('{"path":"/en/ch20.html","title":"Chapter 20 Designing for Performance","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"20.1 How to think about performance","slug":"_20-1-how-to-think-about-performance","link":"#_20-1-how-to-think-about-performance","children":[]},{"level":2,"title":"20.2 Measure before (and after) modifying","slug":"_20-2-measure-before-and-after-modifying","link":"#_20-2-measure-before-and-after-modifying","children":[]},{"level":2,"title":"20.3 Design around the critical path","slug":"_20-3-design-around-the-critical-path","link":"#_20-3-design-around-the-critical-path","children":[]},{"level":2,"title":"20.4 An example: RAMCloud Buffers","slug":"_20-4-an-example-ramcloud-buffers","link":"#_20-4-an-example-ramcloud-buffers","children":[]},{"level":2,"title":"20.5 Conclusion","slug":"_20-5-conclusion","link":"#_20-5-conclusion","children":[]}],"git":{"updatedTime":1744084640000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"808ca72c9a72c5376872dd363b87914283fac24c","time":1744084640000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch20.md"}');export{h as comp,l as data};
